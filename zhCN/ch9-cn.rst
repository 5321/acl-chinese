.. highlight:: cl
   :linenothreshold: 0

Chapter 9 数字 (Numbers)
***************************************************

处理数字是 Common Lisp 的强项之一。Common Lisp 有着丰富的数值型别 (numeric types)，而 Common Lisp 操作数字的特性与其他语言比起来更受人喜爱。

9.1 类型 (Types)
==================================

Common Lisp 提供了四种不同类型的数字：整数 (integers)、浮点数 (floating-point numbers)、比例 (ratios) 与复数 (complex number)。本章所描述的函数适用於所有类型的数字。有几个不能用在复数的会特别注明。

一个整数是写成一串数字： ``2001`` 。一个浮点数是可以写成一串包含小数点的数字， ``253.72`` ，或是用科学表示法， ``2.5372e2`` 。一个比例是写成一个整数的分数： ``2/3`` 。而复数 ``a+bi`` 是写成 ``#c(a, b)`` ，其中 ``a`` 与 ``b`` 是两个同样型别的实数 (real number)。

判断式 ``integerp`` , ``floatp`` 以及 ``complexp`` 对於相对应的数字类型返回真。图 9.1 展示了数值类型的层级。

.. figure:: https://github.com/JuanitoFatas/acl-chinese/raw/master/images/Figure-9.1.png

**图 9.1: 数值层级**

以下是某些通用的经验法则，来决定一个计算过程会返回何种数字：

1. 如果一个数值函数 (numeric function)接受一个或多个浮点数做为参数，则返回值会是一个浮点数 (或是一个由浮点数组成的复数)。所以 ``(+ 1.0 2)`` 求值成 ``3.0`` ，而 ``(+ #c(0 1.0) 2)`` 求值成 ``#c(2.0 1.0)`` 。

2. 可约分的比例会被转换成整数。所以 ``(/ 10 2)`` 会返回 ``5`` 。

3. 将复数转成实数时，复数的虚部会转成 ``0`` 。所以 ``(+ #c(1 -1) #c(2 1))`` 求值成 ``3`` 。

第二、第三个规则可以在参数被读取时直接应用，所以：

::

	> (list (ratiop 2/2) (complexp #c(1 0)))
	(NIL NIL)

9.2 转换及取出 (Conversion and Extraction)
==============================================

9.3 比较 (Comparison)
================================

9.4 算术 (Arithematic)
===================================================

9.5 指数 (Exponentiation)
=======================================

9.6 三角函数 (Trigometric Functions)
=======================================

9.7 表示法 (Representations)
=======================================

9.8 范例：追踪光线 (Example: Ray-Tracing)
===========================================

Chapter 9 总结 (Summary)
============================

Chapter 9 练习 (Exercises)
==================================
