.. highlight:: cl
   :linenothreshold: 0

Chapter 9 數字 (Numbers)
***************************************************

處理數字是 Common Lisp 的強項之一。Common Lisp 有著豐富的數值型別 (numeric types)，而 Common Lisp 操作數字的特性與其他語言比起來更受人喜愛。

9.1 型別 (Types)
==================================

Common Lisp 提供了四種不同種類的數字：整數 (integers)、浮點數 (floating-point numbers)、比例 (ratios) 與複數 (complex number)。本章所描述的函數適用於所有種類的數字。有幾個不能用在複數的會特別註明。

一個整數是寫成一串數字： ``2001`` 。一個浮點數是可以寫成一串包含小數點的數字， ``253.72`` ，或是用科學表示法， ``2.5372e2`` 。一個比例是寫成一個整數的分數： ``2/3`` 。而複數 ``a+bi`` 是寫成 ``#c(a, b)`` ，其中 ``a`` 與 ``b`` 是兩個同樣型別的實數 (real number)。

判斷式 ``integerp`` , ``floatp`` 以及 ``complexp`` 對於相對應的數字型別回傳真。圖 9.1 展示了數值型別的階級。

.. figure:: https://github.com/JuanitoFatas/acl-chinese/raw/master/images/Figure-9.1.png

**圖 9.1: 數值型別**

以下是某些通用的經驗法則，來決定一個計算過程會回傳何種數字：

1. 如果一個數值函數 (numeric function)接受一個或多個浮點數做為參數，則回傳值會是一個浮點數 (或是一個由浮點數組成的複數)。所以 ``(+ 1.0 2)`` 求值成 ``3.0`` ，而 ``(+ #c(0 1.0) 2)`` 求值成 ``#c(2.0 1.0)`` 。

2. 可約分的比例會被轉換成整數。所以 ``(/ 10 2)`` 會回傳 ``5`` 。

3. 將複數轉成實數時，複數的虛部會轉成 ``0`` 。所以 ``(+ #c(1 -1) #c(2 1))`` 求值成 ``3`` 。

第二、第三個規則可以在參數被讀取時直接應用，所以：

::

	> (list (ratiop 2/2) (complexp #c(1 0)))
	(NIL NIL)

9.2 轉換及取出 (Conversion and Extraction)
==============================================================

9.3 比較 (Comparison)
================================

9.4 算術 (Arithematic)
===================================================

9.5 指數 (Exponentiation)
=======================================

9.6 三角函數 (Trigometric Functions)
=======================================

9.7 表示法 (Representations)
=======================================

9.8 範例：追蹤光線 (Example: Ray-Tracing)
==========================================

Chapter 9 總結 (Summary)
============================

Chapter 9 練習 (Exercises)
==================================