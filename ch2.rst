第二章：歡迎來到Lisp
*********************

本章的目的是儘快讓你開始寫程式。本章結束時，你會掌握足夠的Common Lisp知識來撰寫程式。

2.1 形式 (Form)
=======================

你可以經由使用Lisp而學習它，這是千真萬確的事實，因為Lisp是互動式語言。任何Lisp系統都包含一個互動式的前台叫做*頂層*(toplevel)。你在頂層輸入Lisp表達式(expression)，然後系統顯示它們的值。

Lisp通常顯示一個符號告訴你，它正在等待你的輸入。許多Common Lisp的實現用 \ ``>``\  作為頂層提示符(prompt)。我們在這也用這符號。

最簡單的Lisp表達式之一是一個整數。如果我們在提示符後面輸入\  ``1``\  ，

::

   > 1
   1
   >

系統會印出它的值，伴隨著另一個提示符，告訴你它在等待更多的輸入。

這種情況下，顯示的值和我們輸入的值一樣。一個數字\  ``1``\  稱之為對自己求值。當我們輸入需要做某些計算來求值的表達式時，生活變得更加有趣。舉例來說，如果我們想把兩個數相加，我們輸入類似：

::

   > (+ 2 3)
   5

在表達式 \ ``(+ 2 3)``\  中， \ ``+``\  稱作運算元，而數字2跟3稱之為引數(arguments)。

在日常生活中，我們會把此表達式寫作 \ ``2 + 3``\  ，但在Lisp我們把 \ ``+``\  運算元寫在前面，後面跟著引數，把整個表達式用一對括號包起來： \ ``(+ 2 3)``\  。這稱之為\ *前序*\ 表達式。一開始可能覺得這樣寫表達式有點怪，但事實上這種表示法是Lisp最好的東西之一。

舉例來說，我們想要把三個數加起來，用通常的表示法我們要寫兩次 \ ``+``\  ，

::

   2 + 3 + 4

然而在Lisp中我們只需增加一個引數：

::

   (+ 2 3 4)

平常我們用 \ ``+``\  ，它必須有兩個引數，一個在左，一個在右。前序表示法的彈性意味者，在Lisp中， \ ``+``\  可以接受任意數目的引數，包括沒有引數：

::

   > (+)
   0
   > (+ 2)
   2
   > (+ 2 3)
   5
   > (+ 2 3 4)
   9
   > (+ 2 3 4 5)
   14

因為運算元可以接受不同數目的引數，我們需要用括號來註明表達式的開始和結束。

可以是巢狀表達式。即表達式中的引數可以是另一個複雜的表達式：

::

   > (/ (- 7 1) (- 4 2))
   3

用中文來說，(七減一)除以(四減二)。

另一個Lisp表示法美麗的地方是：它就是這麼簡單。所有Lisp表達式要嘛是 \ ``1``\  這樣的原子(atom)，或是包在括號中由零個或多個表達式組成的列表(lists)。以下是合法的Lisp表達式：

::

   2     (+ 2 3)     (+ 2 3 4)     (/ (- 7 1) (- 4 2))

我們將看到，所有的Lisp程式都採用這種形式。像C這種語言有更複雜的語法：算數表達式採用中序表示法; 函數呼叫採用某種前序表示法，引數用逗號隔開; 表達式用分號隔開; 而一段程式用大括號隔開。

在Lisp中，我們用單一的表示法來表達所有的概念。

2.2 求值 (Evaluation)
========================

上一小節中，我們在頂層輸入表達式，然後Lisp顯示它們的值。在這節裡我們深入理解一下表達式是如何被求值的。

在Lisp中， \ ``+``\  是一個函數，然而一個表達式如 \ ``(+ 2 3)``\  是一個函數呼叫。

當Lisp對函數呼叫求值時，它做這兩個步驟：

  1. 首先先對引數從左至右求值。在這個情況是，每一個引數對自己求值，所以引數的值分別是 \ ``2``\  跟 \ ``3``\  。
  2. 引數的值傳入以運算元命名的函數。在這個情況是，即 \ ``+``\  函數，返回 \ ``5``\  。
  
  如果任何引數本身是函數呼叫，它們遵循上述規則。所以當 \``(/ (- 7 1) (- 4 2))``\  被求值時所發生的情況：

  1. Lisp對 \ ``(- 7 1)``\  求值: 7求值為7，1求值為1，它們被傳給函數 \ ``-``\  ，返回 6。
  2. Lisp對 \ ``(- 4 2)``\  求值: 4求值為4，2求值為2，它們被傳給函數 \ ``-``\  ，返回 2。
  3. 數值6與2被傳入函數 \ ``/``\  ，返回 3。

不是所有的Common Lisp運算元都是函數，但大部分是。而函數呼叫都是照這樣來求值。對引數從左至右求值，然後將它們的數值傳入函數，返回整個表達式的值。這稱為Common Lisp的求值規則。

:: 

   遠離麻煩

   如果你試著輸入Lisp不能理解的東西，它會顯示一個錯誤訊息，然後把你帶到*中斷迴圈*(break loop)。
   中斷迴圈給予有經驗的程式設計師一個機會來找出錯誤的原因，不過最初你只會想知道如何從中斷迴圈中跳出。
   如何返回頂層取決於你所使用的Common Lisp實現。在這個假設的實現環境中，輸入 :abort 跳出：

   > (/ 1 0)
   Error: Division by zero
          Options: :abort, :backtrace
   >> :abort
   >
   
   附錄A告訴你如何對Lisp程式除錯，以及給出一些常見的錯誤例子。

一個運算元不遵守Common Lisp求值規則是 \ ``quote``\  。這 \ ``quote``\  叫做特殊運算元，意味者他有自己特別的求值規則。而這個規則是：什麼也不做。這 \ ``quote``\  運算元接受一個引數，然後逐字地返回它。

::

   > (quote (+ 3 5))
   (+ 3 5)

方便起見，Common Lisp定義 \ ``'``\  作為 \ ``quote``\  的縮寫。你可以在任何表達式前貼上一個 \ ``'``\  得到與呼叫 \ ``quote``\  同樣的效果：

::

   > '(+ 3 5)
   (+ 3 5)

使用縮寫 \ ``'``\  比 \ ``quote``\  來得普遍。Lisp提供 \ ``quote``\  作為一種 \ *保護*\  表達式被求值的方式。下一節會解釋為什麼這種保護很有用。

2.3 資料 (Data)
==================