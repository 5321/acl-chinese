Chapter 2 欢迎来到Lisp (Welcome to Lisp)
**************************************************

本章的目的是尽快让你开始编程。本章结束时，你会掌握足够的Common Lisp知识来编程。

2.1 形式 (Form)
===================

你可以经由编写Lisp而学习它，这是千真万确的事实，因为Lisp是交互式语言。任何Lisp系统都包含一个交互式的前端叫做*顶层*(toplevel)。你在顶层输入Lisp表达式(expression)，然后系统显示它们的值。

Lisp通常显示一个符号告诉你，它正在等待你的输入。许多Common Lisp的实现用 \ ``>``\  作为顶层提示符(prompt)。我们在这也用这符号。

最简单的Lisp表达式之一是一个整数。如果我们在提示符后面输入 \ ``1``\  ，

::

   > 1
   1
   >

系统会打印出它的值，伴随着另一个提示符，告诉你它在等待更多的输入。

这种情况下，显示的值和我们输入的值一样。一个数字 \ ``1``\  称之为对自己求值。当我们输入需要做某些计算来求值的表达式时，生活变得更加有趣。举例来说，如果我们想把两个数相加，我们输入类似：

::

   > (+ 2 3)
   5

在表达式 \ ``(+ 2 3)``\  中， \ ``+``\  称作操作符，而数字2跟3称之为自变量(arguments)。

在日常生活中，我们会把此表达​​式写作 \ ``2 + 3``\  ，但在Lisp我们把 \ ``+``\  操作符写在前面，后面跟着自变量，把整个表达式用一对括号包起来： \ ``(+ 2 3)``\ 。这称之为 \ *前序*\   表达式。一开始可能觉得这样写表达式有点怪，但事实上这种表示法是Lisp最好的东西之一。

举例来说，我们想要把三个数加起来，用通常的表示法我们要写两次 \ ``+``\ ，

::

   2 + 3 + 4

然而在Lisp中我们只需增加一个自变量：

::

   (+ 2 3 4)

平常我们用 \ ``+``\  ，它必须有两个自变量，一个在左，一个在右。前序表示法的弹性意味者，在Lisp中， \ ``+``\  可以接受任意数目的自变量，包括没有自变量：

::

   > (+)
   0
   > (+ 2)
   2
   > (+ 2 3)
   5
   > (+ 2 3 4)
   9
   > (+ 2 3 4 5)
   14

因为操作符可以接受不同数目的自变量，我们需要用括号来注明表达式的开始和结束。

表达式可以嵌套。即表达式中的自变量可以是另一个复杂的表达式：

::

   > (/ (- 7 1) (- 4 2))
   3

用中文来说，(七减一)除以(四减二)。

另一个Lisp表示法美丽的地方是：它就是这么简单。所有Lisp表达式要么是 \ ``1``\  这样的原子(atom)，要么是包在括号中由零个或多个表达式组成的列表(lists)。以下是合法的Lisp表达式：

::

   2 (+ 2 3) (+ 2 3 4) (/ (- 7 1) (- 4 2))

我们将看到，所有的Lisp程序都采用这种形式。像C这种语言有更复杂的语法：算数表达式采用中序表示法; 函数调用采用某种前序表示法，自变量用逗号隔开; 表达式用分号隔开; 而一段程序用大括号隔开。

在Lisp中，我们用单一的表示法来表达所有的概念。

2.2 求值 (Evaluation)
==========================

上一小节中，我们在顶层输入表达式，然后Lisp显示它们的值。在这节里我们深入理解一下表达式是如何被求值的。

在Lisp中， \ ``+``\ 是一个函数，然而一个表达式如 \ ``(+ 2 3)``\ 是一个函数调用。

当Lisp对函数调用求值时，它做这两个步骤：

  1. 首先先对自变量从左至右求值。在这个情况是，每一个自变量对自己求值，所以自变量的值分别是\ ``2``\ 跟\ ``3``\ 。
  2. 自变量的值传入以操作符命名的函数。在这个情况是，即\ ``+``\ 函数，返回\ ``5``\ 。
  
  如果任何自变量本身是函数调用，它们遵循上述规则。所以当\``(/ (- 7 1) (- 4 2))``\ 被求值时所发生的情况：

  1. Lisp对\ ``(- 7 1)``\ 求值: 7求值为7，1求值为1，它们被传给函数\ ``-``\ ，返回6。
  2. Lisp对\ ``(- 4 2)``\ 求值: 4求值为4，2求值为2，它们被传给函数\ ``-``\ ，返回2。
  3. 数值6与2被传入函数\ ``/``\ ，返回3。

不是所有的Common Lisp操作符都是函数，但大部分是。而函数调用都是照这样来求值。对自变量从左至右求值，然后将它们的数值传入函数，返回整个表达式的值。这称为Common Lisp的求值规则。

::

   远离麻烦

   如果你试着输入Lisp不能理解的东西，它会显示一个错误讯息，然后把你带到*中断循环*(b​​reak loop)。
   中断回圈给予有经验的程序员一个机会来找出错误的原因，不过最初你只会想知道如何从中断循环中跳出。
   如何返回顶层取决于你所使用的Common Lisp实现。在这个假设的实现环境中，输入 :abort 跳出：

   > (/ 1 0)
   Error: Division by zero
          Options: :abort, :backtrace
   >> :abort
   >
   
   附录A告诉你如何对Lisp程式除错，以及给出一些常见的错误例子。

一个操作符不遵守Common Lisp求值规则是 \ ``quote``\ 。这 \ ``quote``\ 叫做特殊操作符，意味者他有自己特别的求值规则。而这个规则是：什么也不做。这 \ ``quote``\ 操作符接受一个自变量，然后逐字地返回它。

::

   > (quote (+ 3 5))
   (+ 3 5)

方便起见，Common Lisp定义 \ ``'``\ 作为 \ ``quote``\ 的简写。你可以在任何表达式前贴上一个 \ ``'``\ 得到与调用 \ ``quote``\ 同样的效果：

::

   > '(+ 3 5)
   (+ 3 5)

使用缩写 \ ``'``\ 比 \ ``quote``\ 来得普遍。 Lisp提供 \ ``quote``\ 作为一种 \ *保护*\ 表达式被求值的方式。下一节会解释为什么这种保护很有用。

2.3 数据 (Data)
=====================