第二章：欢迎来到Lisp
*********************

本章的目的是尽快让你开始编程。本章结束时，你会掌握足够的Common Lisp知识来编程。

2.1. 形式 (Form)
===========

你可以经由编写Lisp而学习它，这是千真万确的事实，因为Lisp是交互式语言。任何Lisp系统都包含一个交互式的前端叫做*顶层*(toplevel)。你在顶层输入Lisp表达式(expression)，然后系统显示它们的值。

Lisp通常显示一个符号告诉你，它正在等待你的输入。许多Common Lisp的实现用\ ``>``\ 作为顶层提示符(prompt)。我们在这也用这符号。

最简单的Lisp表达式之一是一个整数。如果我们在提示符后面输入\ ``1``\ ，

::

   > 1
   1
   >

系统会打印出它的值，伴随着另一个提示符，告诉你它在等待更多的输入。

这种情况下，显示的值和我们输入的值一样。一个数字\ ``1``\ 称之为对自己求值。当我们输入需要做某些计算来求值的表达式时，生活变得更加有趣。举例来说，如果我们想把两个数相加，我们输入类似：

::

   > (+ 2 3)
   5

在表达式\ ``(+ 2 3)``\ 中， \ ``+``\ 称作操作符，而数字2跟3称之为自变量(arguments)。

在日常生活中，我们会把此表达​​式写作\ ``2 + 3``\ ，但在Lisp我们把\ ``+``\ 操作符写在前面，后面跟着自变量，把整个表达式用一对括号包起来： \ ``(+ 2 3)``\ 。这称之为\ *前序*\ 表达式。一开始可能觉得这样写表达式有点怪，但事实上这种表示法是Lisp最好的东西之一。

举例来说，我们想要把三个数加起来，用通常的表示法我们要写两次\ ``+``\ ，

::

   2 + 3 + 4

然而在Lisp中我们只需增加一个自变量：

::

   (+ 2 3 4)

平常我们用\ ``+``\ ，它必须有两个自变量，一个在左，一个在右。前序表示法的弹性意味者，在Lisp中， \ ``+``\ 可以接受任意数目的自变量，包括没有自变量：

::

   > (+)
   0
   > (+ 2)
   2
   > (+ 2 3)
   5
   > (+ 2 3 4)
   9
   > (+ 2 3 4 5)
   14

因为操作符可以接受不同数目的自变量，我们需要用括号来注明表达式的开始和结束。

表达式可以嵌套。即表达式中的自变量可以是另一个复杂的表达式：

::

   >(/ (- 7 1) (- 4 2))
   3

用中文来说，(七减一)除以(四减二)。

另一个Lisp表示法美丽的地方是：它就是这么简单。所有Lisp表达式要么是\ ``1``\ 这样的原子(atom)，要么是包在括号中由零个或多个表达式组成的列表(lists)。以下是合法的Lisp表达式：

::

   2 (+ 2 3) (+ 2 3 4) (/ (- 7 1) (- 4 2))

我们将看到，所有的Lisp程序都采用这种形式。像C这种语言有更复杂的语法：算数表达式采用中序表示法; 函数呼叫采用某种前序表示法，自变量用逗号隔开; 表达式用分号隔开; 而一段程序用大括号隔开。

在Lisp中，我们用单一的表示法来表达所有的概念。

2.2. 求值 (Evaluation)
========================