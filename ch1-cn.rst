第一章：简介
************

\ `约翰麦卡锡 <http://zh.wikipedia.org/zh-cn/%E7%BA%A6%E7%BF%B0%C2%B7%E9%BA%A6%E5%8D%A1%E9% 94%A1>`_\ (John McCarthy)和他的学生于1958年展开Lisp的初次实现工作。 Lisp是继FORTRAN之后，仍在使用的最古老的程序语言。更值得注意的是，它仍走在程序语言技术的最前面。懂Lisp的程序员会告诉你，有某种东西使Lisp与众不同。

Lisp与众不同的部分原因是它被设计成能够自己进化。你能用Lisp定义新的Lisp操作符。当新的抽象概念风行时（如面向对象程序设计），我们总是发现在Lisp是最容易来实现的。这样的基因深植在Lisp当中，永远不会过时。
 
1.1. 新的工具
===================

为什么要学Lisp? 因为它让你能做一些其它语言做不到的事情。如果你只想写一个函式来回传小于\ ``n``\ 的数字总和，那么用Lisp和C是差不多的：

::

	; Lisp                   /* C */
	(defun sum (n)           int sum(int n){
	  (let ((s 0))             int i, s = 0;
	    (dotimes (i n s)       for(i = 0; i < n; i++)
	      (incf s i))))          s += i;
	                            return(s);
	                          }

如果你只想做这种简单的事情，那用什么语言都不重要。假设你想写一个函式，输入一个数\ ``n``\ ，回传把\ ``n``\ 与传入参数相加的函式。

:: 

	; Lisp 
	(defun addn (n)
	  #'(lambda (x)
	      (+ x n)))

在C语言中\ ``addn``\ 怎么实现？你根本写不出来。

你可能会想，谁想做这样的事情？程序语言教你不要做它们没有提供的事情。你得用程序语言的思维来写程式，而且想得到你所不能描述的东西是很困难的。当我刚开始编程时─用Baisc─我不知道有递归，因为我根本不知道有这个东西。我是用Basic在思考。我只能用迭代的概念表达算法，所以我怎会知道递归呢？

如果你不知道\ `词法闭包 <http://zh.wikipedia.org/zh-cn/%E9%97%AD%E5%8C%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6))>`_ \ (上述addn的范例)，相信我，Lisp程序员一直使用它。很难找到任何长度的Common Lisp程序没有使用闭包的好处。在112页前，你自己会持续使用它。

闭包仅是其中一个我们在别的语言找不到的抽象概念之一。另一个更有价值的Lisp特点是，Lisp程序是用Lisp的数据结构来表示的。这表示你可以写出会写程序的程序。人们真的需要这个吗？没错─它们叫做宏，有经验的程式设计师也一直在使用它。到173页你就可以自己写出自己的宏了。

有了宏、闭包以及运行期类别，Lisp凌驾在面向对象程序设计之上。如果你了解上面那句话，也许你不应该阅读此书。你得充分了解Lisp才知道为什么此言不虚。但这不是空泛之言。这是一个重要的论点，而在17章用程序相当明确的证明了这点。

第二章到第十三章会循序渐进地介绍所有你为了理解17章程式的概念。 \ [你的努力会有所回报]_\ ：你会感到在C++编程是窒碍难行的，就像有经验的C++程序员用Basic编程会感到窒息一样。更加鼓舞人心的是，如果我们思考为什么会有这种感觉。 Basic对于用C++编程是令人感到窒息的是因为有经验的C++程序员知道一些用Basic不可能表达出来的技术。同样地，学习Lisp不仅教你学会一门新的语言─它教你新的和更强大的思考程序的方法。

.. [你的努力会有所回报] The reward for you will be an equivocal one:

1.2. 新的技术
===================

如上一节所提到的，Lisp给你别的语言所不能提供的工具。但更多的是，独立地说，伴随Lisp的新特性─自动内存管理，显式型别，闭包，等等─每一项都使编程变得如此简单。结合起来，它们组成了一个关键的部分使得一种新的编程的方式是有可能的。

Lisp被设计为可扩展的：它让你定义自己的操作符。这是可能的，因为Lisp是由和你的程序一样的函式与宏所构成的。所以扩展Lisp就和写一个Lisp程序一样简单。事实上，它是如此的容易（和有用）以至于扩展语言自身成了标准实践。当你在用Lisp语言編程时，你也在创造一个适合你的程序的语言。你由下而上地，也由上而下地工作。

几乎所有的程序都可以从订作适合自己所需的语言中受益。然而越复杂的程式，由下而上的程序设计就显得越有价值。一个由下而上所设计出来的程序可写成一系列的层，每层担任上一层的程式语言。\ `TeX <http://en.wikipedia.org/wiki/TeX>`_ 是最早使用这种方法所写的程序之一。你可以用任何语言由下而上地设计程序，但Lisp是本质上最适合这种方法的工具。

由下而上地程式设计自然地导出可扩展的软件。如果你把由下而上地程序设计的原则想成你程序的最上层，那这层就成为使用者的程序语言。因为可扩展的思想深植于Lisp当中，使得Lisp成为实现可扩展軟件的理想语言。三个1980年代最成功的程序提供了Lisp作为扩展自身的语言：\ `GNU Emacs <http://www.gnu.org/software/emacs/>`_ ，`Autocad <http://www.autodesk.com.tw/adsk/servlet/pc/index?siteID=1170616&id=14977606>`_，和`Interleaf <http://en.wikipedia.org/wiki/Interleaf>`_

由下而上也是得到可重复使用软件的最好方法。写可重用软件的本质是把共同的地方从细节中分离出来，而由下而上地程式设计方法本质地创造这种分离。与其努力撰写一个庞大的应用，不如努力创造一个语言，用相对小的努力在这语言上撰写你的应用。和应用相关的特性集中在最上层，以下的层可以组成一个适合这种应用的语言─还有什么比程序语言更具可重用性的呢？

Lisp让你不仅编写出更复杂的程序，而且写的更快。Lisp程式通常很简短─Lisp给了你更高的抽象化，所以你不用写太多程序。就像\ `Frederick Brooks <http://en.wikipedia.org/wiki/Fred_Brooks>`_ 所指出的，编程所花的时间主要取决于程序的长度。因此这个单独的事实意味者用Lisp编程所花的时间较少。这种效果被Lisp的动态特点放大了：在Lisp中，编辑-编译-测试循环短到使编程像是即时的。

更高的抽象化与互动的环境能改变各个机构开发软件的方式。术语\ *快速建型*\ 描述了一种由Lisp而开始的编程方法：在Lisp，你可以用比写规格说明更短的时间写出一个原型来，而这种原型是高度抽象化的，可作为一个比用英语所写的更好的规格说明。而且Lisp让你可以轻易的从原型转成产品软体。当写一个考虑到速度的Common Lisp程序时，透过现代编译器的编译，它们和用其他的高阶语言写的程式运行得一样快。

除非你相当熟悉Lisp，这个简介像是无意义和冠冕堂皇的声明。 \ *Lisp凌驾面向对象程序设计？ *\ *你创造适合你程序的语言？ *\ *Lisp编程是即时的？ *\ 这些说法是什么意思？现在这些说法就像是空淡的湖泊。随着你学到更多实际的Lisp特色，见过更多可运行的程序，它们就会被实际经验之水所充满，而有了明确的形状。

1.3. 新的方法
===================