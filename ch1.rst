第一章：簡介
************

\ `約翰麥卡錫 <http://zh.wikipedia.org/wiki/%E7%BA%A6%E7%BF%B0%C2%B7%E9%BA%A6%E5%8D%A1%E9%94%A1>`_\ (John McCarthy)和他的學生於1958年開始Lisp的初次實現工作。Lisp是繼FORTRAN之後，仍在使用的最古老的程式語言。更值得注意的是，它仍走在程式語言技術的最前面。懂Lisp的程式設計師會告訴你，有某種東西使Lisp與眾不同。

Lisp與眾不同的部分原因是它被設計成能夠自己進化。你能用Lisp定義新的Lisp運算元。當新的抽象概念風行時（如物件導向程式設計），我們總是發現在Lisp當中是最容易實現它們的。這樣的基因深植在Lisp當中，永遠不會過時。
 
1.1. 新的工具
===================

為什麼要學Lisp? 因為它讓你能做一些其它語言做不到的事情。如果你只想寫一個函數來回傳小於n的數字總和，那麼用Lisp和C是差不多的：

::

	; Lisp                   /* C */
	(defun sum (n)           int sum(int n){
	  (let ((s 0))             int i, s = 0;
	    (dotimes (i n s)       for(i = 0; i < n; i++)
	      (incf s i))))          s += i;
	                            return(s);
	                          }

如果你只想做這種簡單的事情，那用什麼語言都不重要。假設你想寫一個函數，輸入一個數n，回傳把n與傳入引數相加的函數。

:: 

	; Lisp 
	(defun addn (n)
	  #'(lambda (x)
	      (+ x n)))

在C語言中addn怎麼實現？你根本寫不出來。

你可能會想，誰想做這樣的事情？程式語言教你不要做它們沒有提供的事情。你得用程式語言的思維來寫程式，而且想得到你所不能描述的東西是很困難的。當我剛開始寫程式時─用Baisc─我不知道有遞迴，因為我根本不知道有這個東西。我是用Basic在思考。我只能用疊代的概念表達算法，所以我怎會知道遞迴呢？

如果你不知道\ `詞法閉包 <http://zh.wikipedia.org/zh-tw/%E9%97%AD%E5%8C%85_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)>`_ \ (上述addn的範例)，相信我，Lisp程式設計師一直使用它。很難找到任何長度的Common Lisp程式沒有使用閉包的好處。在112頁前，你自己會持續使用它。

閉包僅是其中一個我們在別的語言找到的抽象概念之一。另一個更有價值的Lisp特質是，Lisp程序是用Lisp的資料結構來表示的。這表示你可以寫出會寫程式的程式。人們真的需要這個嗎？沒錯─它們叫做巨集，有經驗的程式設計師也一直在使用它。到173頁你就可以自己寫出自己的巨集了。

有了巨集、閉包以及執行期型態，Lisp凌駕在物件導向程式設計之上。如果你了解上面那句話，也許你不應該閱讀此書。你得充分了解Lisp才知道為什麼此言不虛。但這不是空泛之言。這是一個重要的論點，而在17章用程式相當明確的證明了這點。

第二章到第十三章會循序漸進地介紹所有你為了理解17章程式的概念。\ [你的努力會有所回報]_\ ：你會感到在C++寫程式是窒礙難行的，就像有經驗的C++程式設計師用Basic寫程式會感到窒息一樣。更加鼓舞人心的是，如果我們思考為什麼會有這種感覺。Basic對於用C++寫程式是令人感到窒息的是因為有經驗的C++程式設計師知道一些用Basic不可能表達出來的技術。同樣地，學習Lisp不僅教你學會一門新的語言─它教你新的和更強大的思考程式的方法。

.. [你的努力會有所回報] The reward for you will be an equivocal one:

1.2. 新的技術
===================

1.3. 新的方法
===================
